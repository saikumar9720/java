Project

    Modules

            Module 

                   Features 

                             multiple classes
                              
                                        class within a class

Inner Classes: 

To have modularity in the feature of the application,we use inner classes.


class Outer{
	
	String name="kiran";
	String address="Hyderabad"; 
	
	 class Inner{
		   String email="Kiran@gmail.com";
		   void m1() {
			   System.out.println(email);
			   System.out.println(name);
			   System.out.println(address);
		   }
		 
	 }
}

public class NestedClassDemo {
	public static void main(String[] args) {
		 Outer outer = new Outer();
		  Outer.Inner inner =   outer.new Inner();
		   inner.m1();
	}

}

private nested class:

private nested classes cannot be accessed outside.

static nested class:



class OuterCl {
	
	  static class Inner{
		    static int i=100;
		  
	  }
}

public class StaticNestedClass {

	public static void main(String[] args) {
		  OuterCl.Inner inner = new OuterCl.Inner();
		  System.out.println(inner.i);
	}
	
}



Java 8 Features:

1. Functional Interface and Lambda expressions

interface A{

     void  square(int a);

}

class Aimpl implements A{
  void square(int a){
return a*a;
  }
}


public class Main{

  public static void main(String args[]){
      A aa= new Aimpl();
       System.out.prinltn(aa.square(2)); // 4
  }


}



@FunctionalInterface
interface Login{
	boolean authenticate(String username, String password);

	
}

public class FunctionalInterfaceDemo {
	public static void main(String[] args) {
		Login auth= (String username, String password) -> username.contentEquals("sai") && password.contentEquals("sai");
		
		 System.out.println(auth.authenticate("sai", "sai"));
		
	}
}



PSTMT:

Create a functional interface and provide implementation in main method. 

